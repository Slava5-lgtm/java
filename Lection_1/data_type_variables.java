package Lection_1;

public class data_type_variables {
    public static void main(String[] args) {
/**String s - так работать не будет */
        String s = "   2 " ;
        System.out.println(s);
    }
     
/** перейти на сайт https://metanit.com/java/tutorial/2.12.php */   
    boolean isActive = false;
/** boolean: хранит значение true или false */
    boolean isAlive = true;

    short a = 3;
                    /** byte: хранит целое число от -128 до 127 и занимает 1 байт */
    short b = 8;

    short в = 3;
                                     /** short: хранит целое число от -32768 до 32767 и занимает 2 байта */
    short c = 8;

    int h = 4;
                                     /** int: хранит целое число от -2147483648 до 2147483647 и занимает 4 бай */
    int l = 9;

    long k = 5;
                                     /**
                                      * long: хранит целое число от –9 223 372 036 854 775 808 до 9 223 372 036 854775 807
                                      * и занимает 8 байт
                                      */
    long o = 10;

    double x = 8.5;
                    /** double: хранит число с плавающей точкой от ±4.9*10-324 до 1.7976931348623157*10308 и занимает 8 байт */
    double y = 2.7;

    float x1 = 8.5F;
                    /** float: хранит число с плавающей точкой от -3.4*10^38 до 3.4*10^38 и занимает 4 байта */
    float y1 = 2.7F;

    /** char: хранит одиночный символ в кодировке UTF-16 и занимает 2 байта, поэтому диапазон хранимых значений от 0 до 65535
     *
     * При этом переменная может принимать только те значения, которые соответствуют ее типу. Если переменная представляет
     * целочисленный тип, то она не может хранить дробные числа. */

                                        /** Целые числа */
    
    /** Все целочисленные литералы, например, числа 10, 4, -5, воспринимаются как значения типа int, однако мы можем присваивать
     *  целочисленные литералы другим целочисленным типам: byte, long, short. В этом случае Java автоматически осуществляет
     *  соответствующие преобразования: */
    byte a1 = 1;
    short b2 = 2;    
    long c3 = 2121;
    /** Однако если мы захотим присвоить переменной типа long очень большое число, которое выходит за пределы допустимых значений
     *  для типа int, то мы столкнемся с ошибкой во время компиляции: */
    
    /** long num = 2147483649;  Здесь число 2147483649 является допустимым для типа long, но выходит за предельные значения для
     * типа int. И так как все целочисленные значения по умолчанию расцениваются как значения типа int, то компилятор укажет нам на
     * ошибку. Чтобы решить проблему, надо добавить к числу суффикс l или L, который указывает, что число представляет тип long */
    long num1 = 2147483649l;

    /** Как правило, значения для целочисленных переменных задаются в десятичной системе счисления, однако мы можем применять и
     * другие системы счисления. Например: */

    int num111 = 0x6F; // 16-теричная система, число 111
    int num8 = 010; // 8-ричная система, число 8
    int num13 = 0b1101; // 2-ичная система, число 13

    /** Для задания шестнадцатеричного значения после символов 0x указывается число в шестнадцатеричном формате. Таким же образом
     *  восьмеричное значение указывается после символа 0, а двоичное значение - после символов 0b. */
     
    /** Также целые числа поддерживают разделение разрядов числа с помощью знака подчеркивания: */

    /** int x2 = 123_456;
    int y2 = 234_567__789;
    System.out.println(x2) // 123456
    System.out.println(y2) // 234567789

                                        /** Числа с плавающей точкой */

    /** При присвоении переменной типа float дробного литерала с плавающей точкой, например, 3.1, 4.5 и т.д., Java автоматически
     *  рассматривает этот литерал как значение типа double. И чтобы указать, что данное значение должно рассматриваться как float,
     *  нам надо использовать суффикс f: */

    /** float fl = 30.6f; */
    double db = 30.6;

    /** И хотя в данном случае обе переменных имеют практически одно значения, но эти значения будут по-разному рассматриваться и
     * будут занимать разное место в памяти. */

                                                /** Символы и строки */

    /**
     * В качестве значения переменная символьного типа получает одиночный символ, заключенный в одинарные кавычки: char ch='e';.
     * Кроме того, переменной символьного типа также можно присвоить целочисленное значение от 0 до 65535. В этом случае переменная
     *  опять же будет хранить символ, а целочисленное значение будет указывать на номер символа в таблице символов Unicode
     * (UTF-16). Например: */

    /** char ch = 102; // символ 'f'
    System.out.println(ch);

    /** Еще одной формой задания символьных переменных является шестнадцатеричная форма: переменная получает значение в
     *  шестнадцатеричной форме, которое следует после символов "u".Например, char ch = '\u0066'; опять же будет хранить
     *  символ'f'. */

    /** Символьные переменные не стоит путать со строковыми, 'a' не идентично "a". Строковые переменные представляют объект String,
     * который в отличие от char или int не является примитивным типом в Java: */

    /** String hello = "Hello...";
    System.out.println(hello);

    /** Кроме собственно символов, которые представляют буквы, цифры, знаки препинания, прочие символы, есть специальные наборы
     * символов, которые называют управляющими последовательностями. Например, самая популярная последовательность - "\n". Она
     * выполняет перенос на следующую строку. Например: */

    /**String text = "Hello \nworld";
    System.out.println(text);

    /**Результат выполнения данного кода: */

    /** Hello */
    /** world*/
    /** В данном случае последовательность \n будет сигналом, что необходимо сделать перевод на следующую строку.*/

    /** Начиная с версии 15 Java поддерживает тестовые блоки (text blocks) - многострочный текст, облеченный в тройные кавычки.
     * Рассмотрим, в чем их практическая польза. Например, выведем большой многострочный текст: */

    /** String text = "Вот мысль, которой весь я предан,\n" +
            "Итог всего, что ум скопил.\n" +
            "Лишь тот, кем бой за жизнь изведан,\n" +
            "Жизнь и свободу заслужил.";
    System.out.println(text);

    /** С помощью операции + мы можем присоединить к одному тексту другой, причем продолжение текста может располагаться на
     *  следующей строке. Чтобы при выводе текста происходил перенос на следующую строку, применяется последовательность \n. */

    /** Результат выполнения данного кода: */
    
   /** Вот мысль, которой весь я предан,
    *  Итог всего, что ум скопил.
    *  Лишь тот, кем бой за жизнь изведан,
    *  Жизнь и свободу заслужил. */

    /** Текстовые блоки, которые появились в JDK15, позволяют упростить написание многострочного текста: */

    /** String text = """
            Вот мысль, которой весь я предан,
            Итог всего, что ум скопил.
            Лишь тот, кем бой за жизнь изведан,
            Жизнь и свободу заслужил.
            """;
    System.out.println(text); */

                    /** Обертка — это специальный класс, который хранит внутри себя значение примитива. */
                                    // ** Классы обертки
                            /** int     -    Integer
                             *  short   -    Short
                             *  long    -    Long
                             *  byte    -    Byte
                             *  float   -    Float
                             *  double  -    Double
                             *  char    -    Character
                             *  boolean -    Boolean
                             */

                            /**
                             * Операции Java
                             * ● Присваивание: =
                             * ● Арифметические: *, /, +, -, %,
                             *                                  ++ - икримент:
                             *                                       int a = 123
                             *                                       a++ - можно писать так, а можно сразу в 173 строке
                             *                                       System.out.println(++a)
                             *                                       Ввывод в консоли
                             *                                       124,
                             *                                  -- - декримент:
                             *                                       int a = 123
                             *                                       System.out.println(--a)
                             *                                       Ввывод в консоли
                             *                                       122
                             * ● Операции сравнения: <, >, ==, !=, >=, <=
                             * ● Логические операции: || - коньюкция,
                             *                        && - дизъюнкция,
                             *                         ^ - разделительная дизъюнкция,
                             *                         ! - инверция,
                             * ● Побитовые операции << побитовый сдвиг зто двигают биты например:
                             *                          int a = 8
                             *                          1000 в двоисной системе
                             *                          сдигаем на один бит в лево
                             *                          а = a << 1; - так 
                             *                          System.out.println(a << 1); - можно сразу так
                             *                          у насполучилос новое значения 10000  
                             *                       >>,
                             *                        & - и,
                             *                        ^ - или
                            */



                                        
                                     
}

